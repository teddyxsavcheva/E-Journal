{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nadya\\\\Documents\\\\uni\\\\sem 6\\\\lekcii\\\\major\\\\Spring\\\\fullstack-backend\\\\E-Journal\\\\E-Journal-Group-Project\\\\frontend\\\\src\\\\adminView\\\\StudentsAbsences.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from '../axiosInstance';\nimport { useParams, Link } from 'react-router-dom';\nimport './StudentsAbsences.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentsAbsences = () => {\n  _s();\n  const {\n    classId,\n    teacherId,\n    disciplineId\n  } = useParams();\n  const [students, setStudents] = useState([]);\n  const [absences, setAbsences] = useState({});\n  const [absenceTypes, setAbsenceTypes] = useState([]);\n  const [absenceStatuses, setAbsenceStatuses] = useState([]);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [editingAbsence, setEditingAbsence] = useState(null);\n  const [visibleAbsenceIds, setVisibleAbsenceIds] = useState({}); // Use an object to track visibility by absenceId\n  const [editingAbsences, setEditingAbsences] = useState({}); // State for editing absences\n  const [addingAbsences, setAddingAbsences] = useState({}); // State for adding absences\n  const [addingAbsencesStatus, setAddingAbsencesStatus] = useState({}); // State for adding absences statuses\n  const [excusedAbsencesCount, setExcusedAbsencesCount] = useState({});\n  const [notExcusedAbsencesCount, setNotExcusedAbsencesCount] = useState({});\n\n  // Fetch students in the class\n  const fetchStudents = async () => {\n    try {\n      const response = await axios.get(`/students/school-class/${classId}`);\n      setStudents(response.data);\n    } catch (error) {\n      setError('Error fetching students');\n      console.error('Error fetching students:', error);\n    }\n  };\n\n  // Fetch absences for each student\n  const fetchAbsences = async studentId => {\n    try {\n      const response = await axios.get(`/students/${studentId}/discipline/${disciplineId}/absences`);\n      const studentAbsences = response.data;\n\n      // Calculate counts based on absence statuses\n      const excusedCount = studentAbsences.filter(absence => absence.absenceStatusId === 1).length;\n      const notExcusedCount = studentAbsences.filter(absence => absence.absenceStatusId === 2).length;\n\n      // Update absences and counts for the specific student\n      setAbsences(prevAbsences => ({\n        ...prevAbsences,\n        [studentId]: studentAbsences\n      }));\n      setExcusedAbsencesCount(prevCounts => ({\n        ...prevCounts,\n        [studentId]: excusedCount\n      }));\n      setNotExcusedAbsencesCount(prevCounts => ({\n        ...prevCounts,\n        [studentId]: notExcusedCount\n      }));\n    } catch (error) {\n      setError('Error fetching absences');\n      console.error('Error fetching absences:', error);\n    }\n  };\n\n  // Fetch all absence types\n  const fetchAbsenceTypes = async () => {\n    try {\n      const response = await axios.get('/absenceTypes/');\n      setAbsenceTypes(response.data);\n    } catch (error) {\n      setError('Error fetching absence types');\n      console.error('Error fetching absence types:', error);\n    }\n  };\n\n  // Fetch all absence statuses\n  const fetchAbsenceStatuses = async () => {\n    try {\n      const response = await axios.get('/absenceStatuses/');\n      setAbsenceStatuses(response.data);\n    } catch (error) {\n      setError('Error fetching absence statuses');\n      console.error('Error fetching absence statuses:', error);\n    }\n  };\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchStudents();\n    fetchAbsenceTypes();\n    fetchAbsenceStatuses();\n  }, [classId, teacherId, disciplineId]);\n\n  // Effect to fetch absences whenever students or disciplineId change\n  useEffect(() => {\n    students.forEach(student => {\n      fetchAbsences(student.id);\n    });\n  }, [students, disciplineId]);\n\n  // Find absence type by ID\n  const findAbsenceTypeById = id => {\n    const absenceType = absenceTypes.find(absenceType => absenceType.id === id);\n    return absenceType ? absenceType.absenceTypeEnum : 'Unknown';\n  };\n\n  // Find absence status by ID\n  const findAbsenceStatusById = id => {\n    const absenceStatus = absenceStatuses.find(status => status.id === id);\n    return absenceStatus ? absenceStatus.absenceStatusEnum : 'Unknown';\n  };\n\n  // Add absence to a student\n  const handleAddAbsence = async (event, studentId, disciplineId) => {\n    event.preventDefault();\n    try {\n      const absenceTypeId = addingAbsences[studentId];\n      const absenceStatusId = addingAbsencesStatus[studentId];\n      await axios.post(`/absences/`, {\n        absenceTypeId,\n        absenceStatusId,\n        studentId,\n        disciplineId\n      });\n      setSuccessMessage('Absence added successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n      setAddingAbsences(prevState => ({\n        ...prevState,\n        [studentId]: ''\n      }));\n      setAddingAbsencesStatus(prevState => ({\n        ...prevState,\n        [studentId]: ''\n      }));\n      fetchAbsences(studentId); // Refresh the absences list for the specific student\n    } catch (error) {\n      setError('Error adding absence');\n      console.error('Error adding absence:', error);\n    }\n  };\n\n  // Remove absence from a student\n  const handleRemoveAbsence = async absenceId => {\n    try {\n      await axios.delete(`/absences/${absenceId}`);\n      setSuccessMessage('Absence removed successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n\n      // Update local state to remove the deleted absence\n      const updatedAbsences = {\n        ...absences\n      };\n      Object.keys(updatedAbsences).forEach(studentId => {\n        updatedAbsences[studentId] = updatedAbsences[studentId].filter(absence => absence.id !== absenceId);\n      });\n      setAbsences(updatedAbsences);\n\n      // Optionally, you can also update visibleAbsenceIds if needed\n      setVisibleAbsenceIds(prevState => {\n        const updatedVisibleAbsenceIds = {\n          ...prevState\n        };\n        delete updatedVisibleAbsenceIds[absenceId];\n        return updatedVisibleAbsenceIds;\n      });\n    } catch (error) {\n      setError('Error removing absence');\n      console.error('Error removing absence:', error);\n    }\n  };\n\n  // Start editing an absence\n  const handleEditAbsence = absence => {\n    setEditingAbsence(absence);\n    setEditingAbsences(prevState => ({\n      ...prevState,\n      [absence.studentId]: absence.absenceTypeId\n    }));\n    setVisibleAbsenceIds(prevState => ({\n      ...prevState,\n      [absence.id]: true\n    }));\n  };\n\n  // Save edited absence\n  const handleSaveAbsence = async event => {\n    event.preventDefault();\n    try {\n      const response = await axios.get(`/absences/${editingAbsence.id}`);\n      const existingAbsence = response.data;\n      const updatedAbsence = {\n        ...existingAbsence,\n        absenceTypeId: parseInt(editingAbsences[editingAbsence.studentId], 10)\n      };\n      await axios.put(`/absences/${editingAbsence.id}`, updatedAbsence);\n      setSuccessMessage('Absence updated successfully!');\n      setTimeout(() => setSuccessMessage(''), 3000);\n\n      // Clear state and update visibility\n      setEditingAbsences(prevState => ({\n        ...prevState,\n        [editingAbsence.studentId]: ''\n      }));\n      setEditingAbsence(null);\n      setVisibleAbsenceIds(prevState => ({\n        ...prevState,\n        [editingAbsence.id]: false\n      }));\n      fetchAbsences(editingAbsence.studentId);\n    } catch (error) {\n      setError('Error updating absence');\n      console.error('Error updating absence:', error);\n    }\n  };\n\n  // Handle absence selection change for editing\n  const handleEditAbsenceChange = (studentId, value) => {\n    setEditingAbsences(prevState => ({\n      ...prevState,\n      [studentId]: value\n    }));\n  };\n\n  // Handle absence selection change for adding\n  const handleAddAbsenceChange = (studentId, value) => {\n    setAddingAbsences(prevState => ({\n      ...prevState,\n      [studentId]: value\n    }));\n  };\n\n  // Handle absence status selection change for adding\n  const handleAddAbsenceStatusChange = (studentId, value) => {\n    setAddingAbsencesStatus(prevState => ({\n      ...prevState,\n      [studentId]: value\n    }));\n  };\n\n  // Toggle visibility of absence details\n  const toggleAbsenceVisibility = absenceId => {\n    setVisibleAbsenceIds(prevState => ({\n      ...prevState,\n      [absenceId]: !prevState[absenceId]\n    }));\n  };\n\n  // Function to get badge class based on absence type\n  const getBadgeClass = absenceType => {\n    switch (absenceType) {\n      case 'A':\n        return 'badge-success';\n      // Green\n      case 'B':\n        return 'badge-primary';\n      // Blue\n      case 'C':\n        return 'badge-warning';\n      // Yellow\n      case 'D':\n        return 'badge-orange';\n      // Orange\n      case 'F':\n        return 'badge-danger';\n      // Red\n      default:\n        return 'badge-secondary';\n      // Default color\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Absences for Class ID: \", classId, \", Teacher ID: \", teacherId, \", Discipline ID: \", disciplineId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 23\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/admin/school/${classId}`,\n      className: \"btn btn-secondary mb-4\",\n      children: \"Back to Class List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Excused\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Not Excused\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Current Absence\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: students.length > 0 ? students.map(student => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"name\",\n            children: student.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: excusedAbsencesCount[student.id] || 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: notExcusedAbsencesCount[student.id] || 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"add\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: event => handleAddAbsence(event, student.id, disciplineId),\n              className: \"add-absence-form\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select\",\n                  value: addingAbsences[student.id] || '',\n                  onChange: e => handleAddAbsenceChange(student.id, e.target.value),\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Absence Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 45\n                  }, this), absenceTypes.map(absence => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: absence.id,\n                    children: absence.absenceTypeEnum\n                  }, absence.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 49\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  className: \"form-select\",\n                  value: addingAbsencesStatus[student.id] || '',\n                  onChange: e => handleAddAbsenceStatusChange(student.id, e.target.value),\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Absence Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 45\n                  }, this), absenceStatuses.map(status => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: status.id,\n                    children: status.absenceStatusEnum\n                  }, status.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 49\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  className: \"btn btn-primary add-absence-btn\",\n                  children: \"Add\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this)]\n        }, student.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: \"4\",\n            children: \"No students available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n};\n_s(StudentsAbsences, \"L62XBR4neDC7r529IZGw+J8Op7U=\", false, function () {\n  return [useParams];\n});\n_c = StudentsAbsences;\nexport default StudentsAbsences;\nvar _c;\n$RefreshReg$(_c, \"StudentsAbsences\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","Link","jsxDEV","_jsxDEV","StudentsAbsences","_s","classId","teacherId","disciplineId","students","setStudents","absences","setAbsences","absenceTypes","setAbsenceTypes","absenceStatuses","setAbsenceStatuses","error","setError","successMessage","setSuccessMessage","editingAbsence","setEditingAbsence","visibleAbsenceIds","setVisibleAbsenceIds","editingAbsences","setEditingAbsences","addingAbsences","setAddingAbsences","addingAbsencesStatus","setAddingAbsencesStatus","excusedAbsencesCount","setExcusedAbsencesCount","notExcusedAbsencesCount","setNotExcusedAbsencesCount","fetchStudents","response","get","data","console","fetchAbsences","studentId","studentAbsences","excusedCount","filter","absence","absenceStatusId","length","notExcusedCount","prevAbsences","prevCounts","fetchAbsenceTypes","fetchAbsenceStatuses","forEach","student","id","findAbsenceTypeById","absenceType","find","absenceTypeEnum","findAbsenceStatusById","absenceStatus","status","absenceStatusEnum","handleAddAbsence","event","preventDefault","absenceTypeId","post","setTimeout","prevState","handleRemoveAbsence","absenceId","delete","updatedAbsences","Object","keys","updatedVisibleAbsenceIds","handleEditAbsence","handleSaveAbsence","existingAbsence","updatedAbsence","parseInt","put","handleEditAbsenceChange","value","handleAddAbsenceChange","handleAddAbsenceStatusChange","toggleAbsenceVisibility","getBadgeClass","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","map","name","onSubmit","onChange","e","target","required","type","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/nadya/Documents/uni/sem 6/lekcii/major/Spring/fullstack-backend/E-Journal/E-Journal-Group-Project/frontend/src/adminView/StudentsAbsences.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from '../axiosInstance';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport './StudentsAbsences.css'; // Import the CSS file\r\n\r\nconst StudentsAbsences = () => {\r\n    const { classId, teacherId, disciplineId } = useParams();\r\n    const [students, setStudents] = useState([]);\r\n    const [absences, setAbsences] = useState({});\r\n    const [absenceTypes, setAbsenceTypes] = useState([]);\r\n    const [absenceStatuses, setAbsenceStatuses] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [editingAbsence, setEditingAbsence] = useState(null);\r\n    const [visibleAbsenceIds, setVisibleAbsenceIds] = useState({}); // Use an object to track visibility by absenceId\r\n    const [editingAbsences, setEditingAbsences] = useState({}); // State for editing absences\r\n    const [addingAbsences, setAddingAbsences] = useState({}); // State for adding absences\r\n    const [addingAbsencesStatus, setAddingAbsencesStatus] = useState({}); // State for adding absences statuses\r\n    const [excusedAbsencesCount, setExcusedAbsencesCount] = useState({});\r\n    const [notExcusedAbsencesCount, setNotExcusedAbsencesCount] = useState({});\r\n\r\n    // Fetch students in the class\r\n    const fetchStudents = async () => {\r\n        try {\r\n            const response = await axios.get(`/students/school-class/${classId}`);\r\n            setStudents(response.data);\r\n        } catch (error) {\r\n            setError('Error fetching students');\r\n            console.error('Error fetching students:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch absences for each student\r\n    const fetchAbsences = async (studentId) => {\r\n        try {\r\n            const response = await axios.get(`/students/${studentId}/discipline/${disciplineId}/absences`);\r\n            const studentAbsences = response.data;\r\n\r\n            // Calculate counts based on absence statuses\r\n            const excusedCount = studentAbsences.filter(absence => absence.absenceStatusId === 1).length;\r\n            const notExcusedCount = studentAbsences.filter(absence => absence.absenceStatusId === 2).length;\r\n\r\n            // Update absences and counts for the specific student\r\n            setAbsences(prevAbsences => ({\r\n                ...prevAbsences,\r\n                [studentId]: studentAbsences\r\n            }));\r\n            setExcusedAbsencesCount(prevCounts => ({\r\n                ...prevCounts,\r\n                [studentId]: excusedCount\r\n            }));\r\n            setNotExcusedAbsencesCount(prevCounts => ({\r\n                ...prevCounts,\r\n                [studentId]: notExcusedCount\r\n            }));\r\n        } catch (error) {\r\n            setError('Error fetching absences');\r\n            console.error('Error fetching absences:', error);\r\n        }\r\n    };\r\n\r\n\r\n    // Fetch all absence types\r\n    const fetchAbsenceTypes = async () => {\r\n        try {\r\n            const response = await axios.get('/absenceTypes/');\r\n            setAbsenceTypes(response.data);\r\n        } catch (error) {\r\n            setError('Error fetching absence types');\r\n            console.error('Error fetching absence types:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch all absence statuses\r\n    const fetchAbsenceStatuses = async () => {\r\n        try {\r\n            const response = await axios.get('/absenceStatuses/');\r\n            setAbsenceStatuses(response.data);\r\n        } catch (error) {\r\n            setError('Error fetching absence statuses');\r\n            console.error('Error fetching absence statuses:', error);\r\n        }\r\n    };\r\n\r\n    // Fetch initial data on component mount\r\n    useEffect(() => {\r\n        fetchStudents();\r\n        fetchAbsenceTypes();\r\n        fetchAbsenceStatuses();\r\n    }, [classId, teacherId, disciplineId]);\r\n\r\n    // Effect to fetch absences whenever students or disciplineId change\r\n    useEffect(() => {\r\n        students.forEach(student => {\r\n            fetchAbsences(student.id);\r\n        });\r\n    }, [students, disciplineId]);\r\n\r\n    // Find absence type by ID\r\n    const findAbsenceTypeById = (id) => {\r\n        const absenceType = absenceTypes.find(absenceType => absenceType.id === id);\r\n        return absenceType ? absenceType.absenceTypeEnum : 'Unknown';\r\n    };\r\n\r\n    // Find absence status by ID\r\n    const findAbsenceStatusById = (id) => {\r\n        const absenceStatus = absenceStatuses.find(status => status.id === id);\r\n        return absenceStatus ? absenceStatus.absenceStatusEnum : 'Unknown';\r\n    };\r\n\r\n    // Add absence to a student\r\n    const handleAddAbsence = async (event, studentId, disciplineId) => {\r\n        event.preventDefault();\r\n        try {\r\n            const absenceTypeId = addingAbsences[studentId];\r\n            const absenceStatusId = addingAbsencesStatus[studentId];\r\n            await axios.post(`/absences/`, { absenceTypeId, absenceStatusId, studentId, disciplineId });\r\n            setSuccessMessage('Absence added successfully!');\r\n            setTimeout(() => setSuccessMessage(''), 3000);\r\n            setAddingAbsences(prevState => ({ ...prevState, [studentId]: '' }));\r\n            setAddingAbsencesStatus(prevState => ({ ...prevState, [studentId]: '' }));\r\n            fetchAbsences(studentId); // Refresh the absences list for the specific student\r\n        } catch (error) {\r\n            setError('Error adding absence');\r\n            console.error('Error adding absence:', error);\r\n        }\r\n    };\r\n\r\n    // Remove absence from a student\r\n    const handleRemoveAbsence = async (absenceId) => {\r\n        try {\r\n            await axios.delete(`/absences/${absenceId}`);\r\n            setSuccessMessage('Absence removed successfully!');\r\n            setTimeout(() => setSuccessMessage(''), 3000);\r\n\r\n            // Update local state to remove the deleted absence\r\n            const updatedAbsences = { ...absences };\r\n            Object.keys(updatedAbsences).forEach(studentId => {\r\n                updatedAbsences[studentId] = updatedAbsences[studentId].filter(absence => absence.id !== absenceId);\r\n            });\r\n            setAbsences(updatedAbsences);\r\n\r\n            // Optionally, you can also update visibleAbsenceIds if needed\r\n            setVisibleAbsenceIds(prevState => {\r\n                const updatedVisibleAbsenceIds = { ...prevState };\r\n                delete updatedVisibleAbsenceIds[absenceId];\r\n                return updatedVisibleAbsenceIds;\r\n            });\r\n        } catch (error) {\r\n            setError('Error removing absence');\r\n            console.error('Error removing absence:', error);\r\n        }\r\n    };\r\n\r\n    // Start editing an absence\r\n    const handleEditAbsence = (absence) => {\r\n        setEditingAbsence(absence);\r\n        setEditingAbsences(prevState => ({ ...prevState, [absence.studentId]: absence.absenceTypeId }));\r\n        setVisibleAbsenceIds(prevState => ({ ...prevState, [absence.id]: true }));\r\n    };\r\n\r\n    // Save edited absence\r\n    const handleSaveAbsence = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await axios.get(`/absences/${editingAbsence.id}`);\r\n            const existingAbsence = response.data;\r\n\r\n            const updatedAbsence = {\r\n                ...existingAbsence,\r\n                absenceTypeId: parseInt(editingAbsences[editingAbsence.studentId], 10)\r\n            };\r\n\r\n            await axios.put(`/absences/${editingAbsence.id}`, updatedAbsence);\r\n\r\n            setSuccessMessage('Absence updated successfully!');\r\n            setTimeout(() => setSuccessMessage(''), 3000);\r\n\r\n            // Clear state and update visibility\r\n            setEditingAbsences(prevState => ({ ...prevState, [editingAbsence.studentId]: '' }));\r\n            setEditingAbsence(null);\r\n            setVisibleAbsenceIds(prevState => ({ ...prevState, [editingAbsence.id]: false }));\r\n\r\n            fetchAbsences(editingAbsence.studentId);\r\n        } catch (error) {\r\n            setError('Error updating absence');\r\n            console.error('Error updating absence:', error);\r\n        }\r\n    };\r\n\r\n    // Handle absence selection change for editing\r\n    const handleEditAbsenceChange = (studentId, value) => {\r\n        setEditingAbsences(prevState => ({ ...prevState, [studentId]: value }));\r\n    };\r\n\r\n    // Handle absence selection change for adding\r\n    const handleAddAbsenceChange = (studentId, value) => {\r\n        setAddingAbsences(prevState => ({ ...prevState, [studentId]: value }));\r\n    };\r\n\r\n    // Handle absence status selection change for adding\r\n    const handleAddAbsenceStatusChange = (studentId, value) => {\r\n        setAddingAbsencesStatus(prevState => ({ ...prevState, [studentId]: value }));\r\n    };\r\n\r\n    // Toggle visibility of absence details\r\n    const toggleAbsenceVisibility = (absenceId) => {\r\n        setVisibleAbsenceIds(prevState => ({ ...prevState, [absenceId]: !prevState[absenceId] }));\r\n    };\r\n\r\n    // Function to get badge class based on absence type\r\n    const getBadgeClass = (absenceType) => {\r\n        switch (absenceType) {\r\n            case 'A': return 'badge-success'; // Green\r\n            case 'B': return 'badge-primary'; // Blue\r\n            case 'C': return 'badge-warning'; // Yellow\r\n            case 'D': return 'badge-orange'; // Orange\r\n            case 'F': return 'badge-danger'; // Red\r\n            default: return 'badge-secondary'; // Default color\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <h2>Absences for Class ID: {classId}, Teacher ID: {teacherId}, Discipline ID: {disciplineId}</h2>\r\n            {error && <div className=\"alert alert-danger\">Error: {error}</div>}\r\n            {successMessage && <div className=\"alert alert-success\">{successMessage}</div>}\r\n\r\n            <Link to={`/admin/school/${classId}`} className=\"btn btn-secondary mb-4\">Back to Class List</Link>\r\n\r\n            <table className=\"table table-striped\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Student</th>\r\n                    <th>Excused</th>\r\n                    <th>Not Excused</th>\r\n                    <th>Current Absence</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {students.length > 0 ? (\r\n                    students.map((student) => (\r\n                        <tr key={student.id}>\r\n                            <td className=\"name\">{student.name}</td>\r\n                            <td>{excusedAbsencesCount[student.id] || 0}</td>\r\n                            <td>{notExcusedAbsencesCount[student.id] || 0}</td>\r\n                            <td className=\"add\">\r\n                                <form onSubmit={(event) => handleAddAbsence(event, student.id, disciplineId)} className=\"add-absence-form\">\r\n                                    <div className=\"form-group\">\r\n                                        <select\r\n                                            className=\"form-select\"\r\n                                            value={addingAbsences[student.id] || ''}\r\n                                            onChange={(e) => handleAddAbsenceChange(student.id, e.target.value)}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Absence Type</option>\r\n                                            {absenceTypes.map((absence) => (\r\n                                                <option key={absence.id} value={absence.id}>{absence.absenceTypeEnum}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                        <select\r\n                                            className=\"form-select\"\r\n                                            value={addingAbsencesStatus[student.id] || ''}\r\n                                            onChange={(e) => handleAddAbsenceStatusChange(student.id, e.target.value)}\r\n                                            required\r\n                                        >\r\n                                            <option value=\"\">Select Absence Status</option>\r\n                                            {absenceStatuses.map((status) => (\r\n                                                <option key={status.id} value={status.id}>{status.absenceStatusEnum}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                        <button type=\"submit\" className=\"btn btn-primary add-absence-btn\">Add</button>\r\n                                    </div>\r\n                                </form>\r\n                            </td>\r\n                        </tr>\r\n                    ))\r\n                ) : (\r\n                    <tr>\r\n                        <td colSpan=\"4\">No students available</td>\r\n                    </tr>\r\n                )}\r\n                </tbody>\r\n\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudentsAbsences;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}